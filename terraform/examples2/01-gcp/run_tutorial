#!/bin/bash

# https://cloud.google.com/community/tutorials/managing-gcp-projects-with-terraform

# Create the environment variables.. assumes direnv is installed
cat > .envrc <<EOF
export TF_ADMIN=prodatalab-terraform-admin
export TF_CREDS=~/.config/gcloud/terraform-admin.json
export TF_LOG=ERROR
export TF_LOG_PATH=$(pwd)/terraform.log

export TF_VAR_org_id=$(gcloud beta organizations list | head -n2 | tail -n1 | awk '{print $2}')
export TF_VAR_billing_account=$(gcloud alpha billing accounts list | head -n2 | tail -n1 | awk '{print $1}')
export TF_VAR_credentials=$(cat ${TF_CREDS})
export TF_VAR_project_name=prodatalab-test-compute
export TF_VAR_region=us-central1

export GOOGLE_PROJECT=prodatalab-terraform-admin
export GOOGLE_CREDENTIALS=$(cat ${TF_CREDS})
export GOOGLE_PROJECT=${TF_ADMIN}
EOF

# Run direnv
direnv allow .

# Create new project and link it to billing account
gcloud projects create ${TF_ADMIN} \
  --organization ${TF_VAR_org_id} \
  --set-as-default

gcloud alpha billing accounts projects link ${TF_ADMIN} \
  --account-id ${TF_VAR_billing_account}

# Create service account in the terraform admin project
# and download the JSON credentials
gcloud iam service-accounts create terraform \
  --display-name "Terraform admin account"

gcloud iam service-accounts keys create ${TF_CREDS} \
  --iam-account terraform@${TF_ADMIN}.iam.gserviceaccount.com

# Grant servicde account permission to view the admin project
# and manage cloud storage
gcloud projects add-iam-policy-binding ${TF_ADMIN} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/viewer

gcloud projects add-iam-policy-binding ${TF_ADMIN} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/storage.admin

# Enable the API for terraform access
gcloud service-management enable cloudresourcemanager.googleapis.com
gcloud service-management enable cloudbilling.googleapis.com
gcloud service-management enable iam.googleapis.com
gcloud service-management enable compute.googleapis.com

# Add permissions at the organization and folder levels
gcloud beta organizations add-iam-policy-binding ${TF_VAR_org_id} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/resourcemanager.projectCreator

gcloud beta organizations add-iam-policy-binding ${TF_VAR_org_id} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/billing.user

# Create storage bucket for remote state storage
gsutil mb -p ${TF_ADMIN} gs://${TF_ADMIN}

cat > backend.tf <<EOF
terraform {
 backend "gcs" {
   bucket = "${TF_ADMIN}"
   path   = "/"
 }
}
EOF

# Initialize the terraform backend
terraform init

# Preview
terraform plan

# Apply
terraform apply


# SSH into the instance created
# gcloud compute ssh $(terraform output | grep instance_id | cut -d = -f2)


# Function to clean up all that was done above
function clean_up() {
  # Destroy all tf resources
  terraform destroy

  # Delete tf admin project and all its resources
  gcloud projects delete ${TF_ADMIN}

  # Remove the org IAM for the service account
  gcloud beta organizations delete-iam-policy-binding ${TF_VAR_org_id} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/resourcemanager.projectCreator

  gcloud beta organizations delete-iam-policy-binding ${TF_VAR_org_id} \
  --member serviceAccount:terraform@${TF_ADMIN}.iam.gserviceaccount.com \
  --role roles/billing.user
}
